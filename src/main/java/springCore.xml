<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd"
     xmlns:context="http://www.springframework.org/schema/context">
     
     <!-- context tag can be used to activate several annotations instead of write each bean post processor individually -->
	<context:annotation-config/>
	<context:component-scan base-package="org.yehuda.springProj1.springCore"></context:component-scan>


	<!-- setter injection: implicit call to setter function, MUST have a public default c'tor -->
	<bean id="triangle_setter_injection" class="org.yehuda.springProj1.springCore.Triangle" scope="prototype">
		<property name="type" value="1"></property>
	</bean>
	
	<!--  constructor injection: if we have more than one c'tor, spring will serch for the suitable once, according to type and order(index) of the arguments. -->
	<bean id="triangle_constructor_injection" class="org.yehuda.springProj1.springCore.Triangle">
		<constructor-arg index = "0" type="java.lang.String" value="2"/>  <!-- the first argument -->
		<constructor-arg type="int" value="100"/>                         <!-- the second argument -->
	</bean>

	<!--  bean injection -->
	<bean id="point0,-10" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0">  </property>
		<property name="y" value="-10"> </property>
	</bean>
	
	<bean id="triangle_bean_injection" class="org.yehuda.springProj1.springCore.TriangleWithPoints">
		<!-- using ref -->
		<property name="pointA" ref="point0,0">
		</property>
		
		<!-- using inner bean -->
		<property name="pointB">
			<!-- inner bean injection -->
			<bean class="org.yehuda.springProj1.springCore.Point">
				<property name="x" value="0"></property>
				<property name="y" value="30"></property>
			</bean>
		</property>
		
		<!-- using idref (Not working so using ref to moving forward)-->
		<property name="pointC" ref="point0,-10"> 
			<!--  idref bean="point0,-10"/> -->
		</property>
	</bean>
	
	<bean id="point0,0" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>

	<!--  list injection -->
	<bean id="triangle_list_injection" class="org.yehuda.springProj1.springCore.TriangleWithList">
		<property name="points">
			<list>
				<ref bean="point0,0"/>
				<ref bean="point0,0"/>
				<bean class="org.yehuda.springProj1.springCore.Point">
					<property name="x" value="0"></property>
					<property name="y" value="40"></property>
				</bean>
			</list>
			
		</property>
	</bean>

	<!--  autowire injection: if the names of the fields of the bean class are match to the id's then we can create a bean with autowire -->
	<bean id="point1" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0">  </property>
		<property name="y" value="-10"> </property>
	</bean>
	
	<bean id="point2" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0">  </property>
		<property name="y" value="10"> </property>
	</bean>
	
	<bean id="point3" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0">  </property>
		<property name="y" value="20"> </property>
	</bean>
	
	<bean id="triangle_autowire_injection" class="org.yehuda.springProj1.springCore.TriangleWithAutoWire" autowire="byName">
	</bean>

	<bean id="triangle_aware_injection" class="org.yehuda.springProj1.springCore.TriangleApplicationContextAware">
	</bean>
	
	<!-- bean definition inheritance -->
	<bean id="triangle_inhertiance_parent" class="org.yehuda.springProj1.springCore.TriangleWithPoints">
		<property name="pointA" ref="point0,0"> </property>
	</bean>
	<bean id="triangle_inhertiance_child1" class="org.yehuda.springProj1.springCore.TriangleWithPoints" parent="triangle_inhertiance_parent">
		<property name="pointB" ref="point2"> </property>
		<property name="pointC" ref="point3"> </property>
	</bean>
	<bean id="triangle_inhertiance_child2" class="org.yehuda.springProj1.springCore.TriangleWithPoints" parent="triangle_inhertiance_parent">
		<property name="pointB" ref="point3"> </property>
		<property name="pointC" ref="point2"> </property>
	</bean>
	
	<!-- alias exmaple -->
	<alias name="triangle_setter_injection" alias="another_name_to_triangle_setter_injection"/>


	<!-- bean post processors -->
	<!-- My bean post processor  -->
	<bean class="org.yehuda.springProj1.springCore.DisplayNameBeanPostProcessor"/>
	<!-- Spring bean Required post processor: verifies that all the @Required annotations are met  -->
	<bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>
	<!-- Spring AutoWire bean post processor: tries to automatically connect between beans, first by type and them by name. -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

	<bean id="cir12" class="org.yehuda.springProj1.springCore.Point">
		<qualifier value="cir1"> </qualifier>
		<property name="x" value="0">  </property>
		<property name="y" value="11"> </property>
	</bean>
	
	<!-- This bean is autowired by @Resource annotation, which does an auto refernce by name -->
	<bean id="leftUp" class="org.yehuda.springProj1.springCore.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>

	<!-- coding to Interface -->
	<!-- Circle --> 
	<bean id="circle1" class="org.yehuda.springProj1.springCore.Circle"/>
	<!-- Square -->
	<bean id="square1" class="org.yehuda.springProj1.springCore.Square"/>

	<!-- we create a bean from the framework that helps us to creates messages from properties file -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>mymessages</value>
		</property>
	</bean>
	
</beans>                         
                           